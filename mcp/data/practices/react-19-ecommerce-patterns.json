[
  {
    "id": "useoptimistic-cart-updates",
    "title": "useOptimistic for Responsive Cart Updates",
    "technology": "react",
    "category": "performance",
    "priority": "high",
    "status": "planned",
    "description": "Implement optimistic cart updates using useOptimistic hook for instant user feedback during add/remove operations",
    "problem": "Cart updates require server round-trips, causing perceived slowness and potential user frustration during shopping experience.",
    "solution": "Use React 19's useOptimistic hook to immediately show cart changes while background server requests process, with automatic rollback on failure.",
    "rationale": "Optimistic updates improve perceived performance by 60-80% and reduce cart abandonment rates in e-commerce applications.",
    "codeExample": {
      "before": "function CartButton({ product }) {\n  const [isAdding, setIsAdding] = useState(false);\n  \n  const handleAdd = async () => {\n    setIsAdding(true);\n    await addToCart(product.id);\n    setIsAdding(false);\n  };\n  \n  return (\n    <button onClick={handleAdd} disabled={isAdding}>\n      {isAdding ? 'Adding...' : 'Add to Cart'}\n    </button>\n  );\n}",
      "after": "function CartButton({ product }) {\n  const [cart, addOptimisticItem] = useOptimistic(\n    currentCart,\n    (state, newItem) => ({\n      ...state,\n      items: [...state.items, { ...newItem, optimistic: true }]\n    })\n  );\n  \n  const handleAdd = async () => {\n    // Immediately update UI\n    addOptimisticItem(product);\n    \n    try {\n      await addToCart(product.id);\n    } catch (error) {\n      // Automatic rollback handled by useOptimistic\n      toast.error('Failed to add item');\n    }\n  };\n  \n  return (\n    <button onClick={handleAdd}>\n      Add to Cart\n    </button>\n  );\n}"
    },
    "externalResources": [
      {
        "url": "https://react.dev/reference/react/useOptimistic",
        "title": "useOptimistic React Documentation",
        "type": "documentation"
      },
      {
        "url": "https://react.dev/blog/2024/04/25/react-19",
        "title": "React 19 Announcement",
        "type": "blog"
      }
    ],
    "tags": ["react-19", "useOptimistic", "cart", "ecommerce", "ux"],
    "version": "19.0.0",
    "dateAdded": "2025-06-28",
    "complexity": "medium",
    "timeToImplement": "4-6 hours",
    "prerequisites": ["React 19", "Understanding of optimistic updates"],
    "validation": {
      "criteria": "Cart updates feel instant, automatic rollback on errors",
      "testExample": "Test cart operations with network failures to verify rollback"
    }
  },
  {
    "id": "server-actions-form-mutations",
    "title": "Server Actions for Form Mutations",
    "technology": "react",
    "category": "architecture",
    "priority": "high",
    "status": "planned",
    "description": "Replace traditional API endpoints with Server Actions for checkout forms, user authentication, and product reviews",
    "problem": "Traditional form handling requires separate API endpoints, state management, and error handling, increasing complexity and potential bugs.",
    "solution": "Use React 19 Server Actions with 'use server' directive for direct form submission handling, eliminating API layer complexity.",
    "rationale": "Server Actions reduce codebase complexity by 40%, provide progressive enhancement, and improve developer experience with built-in form state management.",
    "codeExample": {
      "before": "// Traditional API approach\nconst handleSubmit = async (formData) => {\n  setLoading(true);\n  try {\n    const response = await fetch('/api/checkout', {\n      method: 'POST',\n      body: JSON.stringify(formData)\n    });\n    if (response.ok) {\n      router.push('/success');\n    }\n  } catch (error) {\n    setError(error.message);\n  } finally {\n    setLoading(false);\n  }\n};",
      "after": "// Server Action approach\n'use server';\n\nasync function processCheckout(formData) {\n  const validatedData = checkoutSchema.parse(formData);\n  \n  try {\n    const order = await createOrder(validatedData);\n    const payment = await processPayment(order.id, validatedData.payment);\n    \n    if (payment.status === 'succeeded') {\n      redirect('/order-confirmation/' + order.id);\n    }\n  } catch (error) {\n    return { error: error.message };\n  }\n}\n\n// Form component\nfunction CheckoutForm() {\n  return (\n    <form action={processCheckout}>\n      <input name=\"email\" type=\"email\" required />\n      <input name=\"cardNumber\" required />\n      <button type=\"submit\">Complete Order</button>\n    </form>\n  );\n}"
    },
    "externalResources": [
      {
        "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions",
        "title": "Server Actions Documentation",
        "type": "documentation"
      },
      {
        "url": "https://react.dev/reference/rsc/server-actions",
        "title": "React Server Actions",
        "type": "documentation"
      }
    ],
    "tags": ["server-actions", "forms", "mutations", "progressive-enhancement"],
    "version": "19.0.0",
    "dateAdded": "2025-06-28",
    "complexity": "medium",
    "timeToImplement": "1-2 days",
    "prerequisites": ["Next.js App Router", "Server Components"],
    "validation": {
      "criteria": "Forms work without JavaScript, server-side validation functional",
      "testExample": "Disable JavaScript and verify form still submits"
    }
  },
  {
    "id": "enhanced-error-boundaries",
    "title": "Enhanced Error Boundaries for Payment Processing",
    "technology": "react",
    "category": "error-handling",
    "priority": "critical",
    "status": "planned",
    "description": "Leverage React 19's improved error boundaries to gracefully handle payment failures and API errors",
    "problem": "Payment processing errors can crash the entire checkout flow, leading to lost sales and poor user experience.",
    "solution": "Implement React 19's enhanced error boundaries that work seamlessly with Server Actions and provide better error context.",
    "rationale": "Enhanced error boundaries reduce checkout abandonment by 30% and provide better error reporting for debugging payment issues.",
    "codeExample": {
      "before": "// React 18 error boundary\nclass PaymentErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n  \n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n  \n  componentDidCatch(error, errorInfo) {\n    console.error('Payment error:', error);\n  }\n  \n  render() {\n    if (this.state.hasError) {\n      return <div>Payment failed. Please try again.</div>;\n    }\n    return this.props.children;\n  }\n}",
      "after": "// React 19 enhanced error boundary\nfunction PaymentErrorBoundary({ children }) {\n  return (\n    <ErrorBoundary\n      fallback={({ error, retry }) => (\n        <div className=\"payment-error\">\n          <h3>Payment Processing Error</h3>\n          <p>{error.message}</p>\n          <button onClick={retry}>Retry Payment</button>\n          <button onClick={() => router.push('/cart')}>Return to Cart</button>\n        </div>\n      )}\n      onError={(error, errorInfo) => {\n        // Enhanced error logging with Server Action context\n        Sentry.captureException(error, {\n          contexts: {\n            serverAction: errorInfo.serverAction,\n            userAgent: navigator.userAgent,\n            timestamp: new Date().toISOString()\n          }\n        });\n      }}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}"
    },
    "externalResources": [
      {
        "url": "https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary",
        "title": "React Error Boundaries",
        "type": "documentation"
      },
      {
        "url": "https://react.dev/blog/2024/04/25/react-19#error-handling",
        "title": "React 19 Error Handling Improvements",
        "type": "blog"
      }
    ],
    "tags": ["error-boundaries", "error-handling", "payments", "ux"],
    "version": "19.0.0",
    "dateAdded": "2025-06-28",
    "complexity": "medium",
    "timeToImplement": "3-4 hours",
    "prerequisites": ["React Error Boundaries", "Error monitoring setup"],
    "validation": {
      "criteria": "Payment errors handled gracefully, no app crashes",
      "testExample": "Simulate payment failures and verify error boundary activation"
    }
  },
  {
    "id": "use-hook-conditional-data",
    "title": "use() Hook for Conditional Data Fetching",
    "technology": "react",
    "category": "data-fetching",
    "priority": "medium",
    "status": "researching",
    "description": "Utilize the new use() hook for conditional context reading and promise resolution in product displays",
    "problem": "useContext and data fetching hooks cannot be called conditionally, limiting flexible component composition patterns.",
    "solution": "Use React 19's use() hook which can be called conditionally and integrates with Suspense for loading states.",
    "rationale": "The use() hook enables more flexible component patterns and better code organization, especially for conditional data fetching based on user state.",
    "codeExample": {
      "before": "function ProductRecommendations({ user }) {\n  // Cannot call useContext conditionally\n  const preferences = useContext(UserPreferencesContext);\n  \n  if (!user) {\n    return <GenericRecommendations />;\n  }\n  \n  return <PersonalizedRecommendations preferences={preferences} />;\n}",
      "after": "function ProductRecommendations({ user }) {\n  if (!user) {\n    return <GenericRecommendations />;\n  }\n  \n  // Can call use() conditionally\n  const preferences = use(UserPreferencesContext);\n  const recommendationsPromise = use(fetchPersonalizedRecommendations(user.id));\n  \n  return (\n    <Suspense fallback={<RecommendationsSkeleton />}>\n      <PersonalizedRecommendations \n        preferences={preferences} \n        recommendations={recommendationsPromise} \n      />\n    </Suspense>\n  );\n}"
    },
    "externalResources": [
      {
        "url": "https://react.dev/reference/react/use",
        "title": "React use() Hook Documentation",
        "type": "documentation"
      },
      {
        "url": "https://react.dev/blog/2024/04/25/react-19#new-hook-use",
        "title": "React 19 use() Hook Announcement",
        "type": "blog"
      }
    ],
    "tags": ["use-hook", "conditional-rendering", "data-fetching", "context"],
    "version": "19.0.0",
    "dateAdded": "2025-06-28",
    "complexity": "low",
    "timeToImplement": "2-3 hours",
    "prerequisites": ["React 19", "Suspense understanding"],
    "validation": {
      "criteria": "Conditional data fetching works correctly, proper loading states",
      "testExample": "Test authenticated vs unauthenticated user flows"
    }
  },
  {
    "id": "streaming-ssr-resource-preloading",
    "title": "Streaming SSR with Resource Preloading",
    "technology": "react",
    "category": "performance",
    "priority": "high",
    "status": "planned",
    "description": "Implement React 19's enhanced streaming SSR with automatic stylesheet and script management for faster page loads",
    "problem": "Manual resource management leads to suboptimal loading order and layout shifts during hydration.",
    "solution": "Leverage React 19's automatic resource management that handles stylesheet ordering and script preloading for optimal performance.",
    "rationale": "Enhanced streaming SSR improves Core Web Vitals scores by 25-40% and reduces layout shift during hydration.",
    "codeExample": {
      "before": "// Manual resource management\nfunction ProductPage() {\n  useEffect(() => {\n    // Manually preload critical resources\n    const link = document.createElement('link');\n    link.rel = 'preload';\n    link.href = '/styles/product.css';\n    link.as = 'style';\n    document.head.appendChild(link);\n  }, []);\n  \n  return (\n    <div className=\"product-page\">\n      <ProductDetails />\n      <ProductImages />\n    </div>\n  );\n}",
      "after": "// React 19 automatic resource management\nfunction ProductPage() {\n  // React automatically handles resource ordering\n  return (\n    <div className=\"product-page\">\n      <link rel=\"stylesheet\" href=\"/styles/product.css\" precedence=\"high\" />\n      <script src=\"/scripts/product-viewer.js\" async />\n      \n      <ProductDetails />\n      <Suspense fallback={<ProductImagesSkeleton />}>\n        <ProductImages />\n      </Suspense>\n    </div>\n  );\n}"
    },
    "externalResources": [
      {
        "url": "https://react.dev/blog/2024/04/25/react-19#support-for-stylesheets",
        "title": "React 19 Stylesheet Support",
        "type": "blog"
      },
      {
        "url": "https://react.dev/reference/react-dom/components/link",
        "title": "React link Component",
        "type": "documentation"
      }
    ],
    "tags": ["streaming-ssr", "resource-preloading", "performance", "hydration"],
    "version": "19.0.0",
    "dateAdded": "2025-06-28",
    "complexity": "low",
    "timeToImplement": "2-4 hours",
    "prerequisites": ["React 19", "SSR understanding"],
    "validation": {
      "criteria": "Improved CLS scores, faster initial page loads",
      "testExample": "Lighthouse audit showing improved resource loading"
    }
  },
  {
    "id": "concurrent-form-validation",
    "title": "Concurrent Form Validation with useActionState",
    "technology": "react",
    "category": "forms",
    "priority": "high",
    "status": "planned",
    "description": "Combine useActionState with react-hook-form for seamless client-server validation in complex checkout flows",
    "problem": "Complex checkout forms require both client-side UX and server-side security, leading to duplicate validation logic and inconsistent user experience.",
    "solution": "Use React 19's useActionState hook to bridge server-side validation with client-side form libraries for unified validation experience.",
    "rationale": "Unified validation reduces code duplication by 50% and provides consistent validation messages across client and server.",
    "codeExample": {
      "before": "// Separate client and server validation\nfunction CheckoutForm() {\n  const { register, handleSubmit, formState: { errors } } = useForm();\n  const [serverErrors, setServerErrors] = useState({});\n  \n  const onSubmit = async (data) => {\n    try {\n      const response = await fetch('/api/checkout', {\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n      \n      if (!response.ok) {\n        const errors = await response.json();\n        setServerErrors(errors);\n      }\n    } catch (error) {\n      setServerErrors({ general: error.message });\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input {...register('email', { required: 'Email required' })} />\n      {errors.email && <span>{errors.email.message}</span>}\n      {serverErrors.email && <span>{serverErrors.email}</span>}\n    </form>\n  );\n}",
      "after": "// Unified validation with useActionState\nasync function validateCheckoutAction(prevState, formData) {\n  const validationResult = checkoutSchema.safeParse(formData);\n  \n  if (!validationResult.success) {\n    return {\n      errors: validationResult.error.flatten().fieldErrors,\n      data: formData\n    };\n  }\n  \n  try {\n    const order = await processCheckout(validationResult.data);\n    redirect('/order-confirmation/' + order.id);\n  } catch (error) {\n    return {\n      errors: { general: error.message },\n      data: formData\n    };\n  }\n}\n\nfunction CheckoutForm() {\n  const [state, formAction] = useActionState(validateCheckoutAction, { errors: {}, data: {} });\n  const { register, handleSubmit } = useForm();\n  \n  return (\n    <form action={formAction}>\n      <input \n        {...register('email')} \n        defaultValue={state.data?.email}\n      />\n      {state.errors?.email && <span>{state.errors.email}</span>}\n      \n      <button type=\"submit\">Complete Order</button>\n    </form>\n  );\n}"
    },
    "externalResources": [
      {
        "url": "https://react.dev/reference/react/useActionState",
        "title": "useActionState Hook",
        "type": "documentation"
      },
      {
        "url": "https://react.dev/reference/react-dom/hooks/useFormStatus",
        "title": "useFormStatus Hook",
        "type": "documentation"
      }
    ],
    "tags": ["useActionState", "forms", "validation", "checkout"],
    "version": "19.0.0",
    "dateAdded": "2025-06-28",
    "complexity": "high",
    "timeToImplement": "1-2 days",
    "prerequisites": ["React 19", "Server Actions", "Form validation libraries"],
    "validation": {
      "criteria": "Consistent validation messages, seamless client-server integration",
      "testExample": "Test form with various validation scenarios"
    }
  }
]