{
  "id": "nextjs-app-router-optimization",
  "title": "Optimize Next.js App Router Performance",
  "description": "Best practices for optimizing performance in Next.js 15 App Router applications, including proper use of Server Components, streaming, and caching strategies.",
  "technology": "nextjs",
  "category": "performance",
  "priority": "critical",
  "status": "implemented",
  "problem": "Next.js App Router can suffer from poor performance if not properly optimized. Common issues include unnecessary client-side hydration, inefficient data fetching, poor caching strategies, and blocking renders that prevent streaming benefits.",
  "solution": "Implement a comprehensive performance optimization strategy using Server Components by default, strategic use of Client Components, proper data fetching patterns, effective caching strategies, and streaming optimizations.",
  "rationale": "Performance is critical for user experience and SEO. The App Router provides powerful tools for optimization, but they must be used correctly to achieve the best results. Proper implementation can lead to significantly faster page loads and better Core Web Vitals.",
  "code_examples": [
    {
      "title": "Server Component with Streaming",
      "description": "Use Server Components for data fetching with streaming for better perceived performance",
      "language": "typescript",
      "filename": "app/products/page.tsx",
      "code": "import { Suspense } from 'react';\nimport { ProductList } from './product-list';\nimport { ProductSkeleton } from './product-skeleton';\n\n// Server Component by default - no 'use client'\nexport default async function ProductsPage() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8\">Our Products</h1>\n      \n      {/* Streaming with Suspense for better UX */}\n      <Suspense fallback={<ProductSkeleton />}>\n        <ProductList />\n      </Suspense>\n    </div>\n  );\n}",
      "highlight_lines": [7, 10, 11]
    },
    {
      "title": "Efficient Data Fetching",
      "description": "Use fetch with proper caching for optimal performance",
      "language": "typescript",
      "filename": "app/products/product-list.tsx",
      "code": "import { Product } from '@/types';\n\nasync function getProducts(): Promise<Product[]> {\n  // Next.js extends fetch with caching\n  const res = await fetch('https://api.example.com/products', {\n    // Cache for 1 hour, revalidate in background\n    next: { revalidate: 3600 }\n  });\n  \n  if (!res.ok) {\n    throw new Error('Failed to fetch products');\n  }\n  \n  return res.json();\n}\n\nexport async function ProductList() {\n  const products = await getProducts();\n  \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {products.map((product) => (\n        <ProductCard key={product.id} product={product} />\n      ))}\n    </div>\n  );\n}",
      "highlight_lines": [5, 6, 7]
    },
    {
      "title": "Client Component Optimization",
      "description": "Only use Client Components when necessary and optimize bundle size",
      "language": "typescript",
      "filename": "components/product-card.tsx",
      "code": "'use client';\n\nimport { useState } from 'react';\nimport { Product } from '@/types';\nimport dynamic from 'next/dynamic';\n\n// Lazy load heavy components\nconst QuickViewModal = dynamic(() => import('./quick-view-modal'), {\n  loading: () => <p>Loading...</p>,\n  ssr: false // Don't render on server\n});\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport function ProductCard({ product }: ProductCardProps) {\n  const [showQuickView, setShowQuickView] = useState(false);\n  \n  return (\n    <div className=\"border rounded-lg p-4 hover:shadow-lg transition-shadow\">\n      <img \n        src={product.image} \n        alt={product.name}\n        className=\"w-full h-48 object-cover rounded\"\n        loading=\"lazy\" // Native lazy loading\n      />\n      <h3 className=\"mt-2 font-semibold\">{product.name}</h3>\n      <p className=\"text-gray-600\">${product.price}</p>\n      \n      <button \n        onClick={() => setShowQuickView(true)}\n        className=\"mt-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n      >\n        Quick View\n      </button>\n      \n      {showQuickView && (\n        <QuickViewModal \n          product={product} \n          onClose={() => setShowQuickView(false)} \n        />\n      )}\n    </div>\n  );\n}",
      "highlight_lines": [1, 8, 9, 10, 25]
    }
  ],
  "resources": [
    {
      "title": "Next.js App Router Documentation",
      "url": "https://nextjs.org/docs/app",
      "type": "documentation",
      "description": "Official documentation for the App Router",
      "is_official": true
    },
    {
      "title": "Next.js Performance Best Practices",
      "url": "https://nextjs.org/docs/app/building-your-application/optimizing",
      "type": "documentation",
      "description": "Official performance optimization guide",
      "is_official": true
    },
    {
      "title": "Web.dev Core Web Vitals",
      "url": "https://web.dev/vitals/",
      "type": "guide",
      "description": "Understanding Core Web Vitals metrics"
    }
  ],
  "version_info": {
    "technology_version": "15.2.4",
    "compatibility_notes": "These practices are specific to Next.js 15+ App Router. Some patterns may not work with Pages Router.",
    "breaking_changes": [
      "Server Components are default in App Router vs Pages Router",
      "Different data fetching patterns compared to getServerSideProps/getStaticProps"
    ]
  },
  "tags": [
    "app-router",
    "server-components",
    "streaming",
    "caching",
    "core-web-vitals",
    "optimization"
  ],
  "related_practices": [
    "react-server-components-patterns",
    "nextjs-image-optimization"
  ],
  "created_at": "2025-06-28T12:00:00Z",
  "updated_at": "2025-06-28T12:00:00Z",
  "author": "Development Team",
  "reviewed_by": ["Tech Lead", "Senior Developer"],
  "implementation_complexity": "medium",
  "estimated_time": "2-4 hours",
  "prerequisites": [
    "Next.js 15+ project with App Router",
    "Understanding of React Server Components",
    "Basic knowledge of caching strategies"
  ],
  "validation_criteria": [
    "Lighthouse Performance score > 90",
    "Core Web Vitals pass all thresholds",
    "Time to First Byte (TTFB) < 600ms",
    "First Contentful Paint (FCP) < 1.8s",
    "Largest Contentful Paint (LCP) < 2.5s"
  ],
  "test_examples": [
    {
      "title": "Performance Test with Lighthouse CI",
      "description": "Automated performance testing setup",
      "language": "javascript",
      "filename": "lighthouserc.js",
      "code": "module.exports = {\n  ci: {\n    collect: {\n      url: ['http://localhost:3000/products'],\n      numberOfRuns: 3\n    },\n    assert: {\n      assertions: {\n        'categories:performance': ['error', { minScore: 0.9 }],\n        'categories:accessibility': ['error', { minScore: 0.9 }],\n        'categories:best-practices': ['error', { minScore: 0.9 }],\n        'categories:seo': ['error', { minScore: 0.9 }]\n      }\n    }\n  }\n};"
    }
  ]
}