name: Production CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: 20
  PNPM_VERSION: 9

jobs:
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: TypeScript type check
        run: pnpm run type-check
        
      - name: ESLint check
        run: pnpm run lint
        
      - name: Security audit
        run: pnpm audit --audit-level moderate

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run unit tests with coverage
        run: pnpm run test:coverage
        env:
          CI: true
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true
          
      - name: Check coverage threshold
        run: |
          COVERAGE=$(pnpm run test:coverage --silent | grep "All files" | awk '{print $4}' | sed 's/%//')
          if [ "$COVERAGE" -lt "80" ]; then
            echo "Coverage $COVERAGE% is below 80% threshold"
            exit 1
          fi
          echo "Coverage $COVERAGE% meets threshold"

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps
        
      - name: Build application
        run: pnpm run build
        
      - name: Run E2E tests
        run: pnpm run test:e2e
        env:
          CI: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: medusa_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install backend dependencies
        working-directory: ./backend/medusa-backend
        run: yarn install --frozen-lockfile
        
      - name: Run backend unit tests
        working-directory: ./backend/medusa-backend
        run: yarn test:unit
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/medusa_test
          REDIS_URL: redis://localhost:6379
          
      - name: Run backend integration tests
        working-directory: ./backend/medusa-backend
        run: yarn test:integration:http
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/medusa_test
          REDIS_URL: redis://localhost:6379

  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build for analysis
        run: pnpm run analyze
        
      - name: Check bundle size
        run: |
          BUILD_SIZE=$(du -sh .next/static/chunks/pages | cut -f1)
          echo "Build size: $BUILD_SIZE"
          # Add bundle size checks here

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-e2e, performance-check]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-e2e, performance-check]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Run smoke tests on production
        run: |
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1
          echo "Production deployment verified"
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸš€ Production deployment successful!"
          echo "URL: ${{ secrets.PRODUCTION_URL }}"